name: Test

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Testing:
    runs-on:  ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly-2022-12-20

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "requirements_dev.txt"

      - name: Create virtual environment
        run: |
          python -m venv venv

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          profile: minimal
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install tzfpy and test(ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          source venv/bin/activate
          source <(cargo llvm-cov show-env --export-prefix)
          export CARGO_TARGET_DIR=$CARGO_LLVM_COV_TARGET_DIR
          export CARGO_INCREMENTAL=1
          cargo llvm-cov clean --workspace
          cargo test
          pip install --upgrade pip
          pip install -r requirements_dev.txt
          maturin develop --release
          pytest --cov --cov-report xml | tee benchmark_result.txt
          cargo llvm-cov --no-run --lcov --output-path coverage.lcov

      - uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest'
        with:
          files: coverage.lcov,coverage.xml
          name: ${{ matrix.os }}

      - name: Install tzfpy and test(windows)
        shell: bash
        # for windows need maturin build
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements_dev.txt
          maturin build --release
          pip install target/wheels/tzfpy-*.whl
          pytest --cov | tee benchmark_result.txt

      - name: Install tzfpy and test(macos)
        if: matrix.os == 'macos-latest'
        run: |
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements_dev.txt
          maturin develop --release
          pytest --cov | tee benchmark_result.txt

      - name: Setup benchmark file name
        id: gen-benchmark-file-name
        shell: bash
        run: |
          echo "filename=tzfpy_benchmark_py_${{ matrix.python-version }}_${{ matrix.os }}.md" >> $GITHUB_OUTPUT

      - name: Report
        shell: bash
        run: |
          set +e
          echo "## Python ${{ matrix.python-version }} with ${{ matrix.os }}" >> ${{ steps.gen-benchmark-file-name.outputs.filename }}
          echo '```' >> ${{ steps.gen-benchmark-file-name.outputs.filename }}
          cat benchmark_result.txt >> ${{ steps.gen-benchmark-file-name.outputs.filename }}
          echo '```' >> ${{ steps.gen-benchmark-file-name.outputs.filename }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: "benchmark_result_as_md"
          path: ${{ steps.gen-benchmark-file-name.outputs.filename }}

  Report:
    needs: [Testing]
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: "benchmark_result_as_md"
          path: ""

      - run: cat tzfpy_benchmark_*.md > $GITHUB_STEP_SUMMARY
